// Generated by CoffeeScript 2.5.1
// node_modules/take-and-make/source/take-and-make.coffee
// Since this is typically the first bit of code included in our big compiled and
// concatenated JS files, this is a great place to demand strictness. CoffeeScript
// does not add strict on its own, but it will permit and enforce it.
"use strict";
var DebugTakeMake, Make, Take;

if (!((typeof Take !== "undefined" && Take !== null) || (typeof Make !== "undefined" && Make !== null))) {
  // We declare our globals such that they're visible everywhere within the current scope.
  // This allows for namespacing — all things within a given scope share a copy of Take & Make.
  Take = null;
  Make = null;
  DebugTakeMake = null;
  (function() {
    var addListener, allNeedsAreMet, alreadyChecking, alreadyWaitingToNotify, asynchronousResolve, checkWaitingTakers, clone, made, notify, notifyTakers, register, resolve, synchronousResolve, takersToNotify, timeoutsNeeded, timeoutsUsed, waitingTakers;
    made = {};
    waitingTakers = [];
    takersToNotify = [];
    alreadyWaitingToNotify = false;
    alreadyChecking = false;
    timeoutsNeeded = 0;
    timeoutsUsed = 0;
    Make = function(name, value = name) {
      if (name == null) {
        // Debug — call Make() in the console to see what we've regstered
        return clone(made);
      }
      // Synchronous register, returns value
      return register(name, value);
    };
    Take = function(needs, callback) {
      if (needs == null) {
        // Debug — call Take() in the console to see what we're waiting for
        return waitingTakers.slice();
      }
      // Synchronous and asynchronous resolve, returns value or object of values
      return resolve(needs, callback);
    };
    DebugTakeMake = function() {
      var base, i, j, len, len1, need, output, ref, waiting;
      output = {
        timeoutsNeeded: timeoutsNeeded,
        timeoutsUsed: timeoutsUsed,
        unresolved: {}
      };
      for (i = 0, len = waitingTakers.length; i < len; i++) {
        waiting = waitingTakers[i];
        ref = waiting.needs;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          need = ref[j];
          if (made[need] == null) {
            if ((base = output.unresolved)[need] == null) {
              base[need] = 0;
            }
            output.unresolved[need]++;
          }
        }
      }
      return output;
    };
    register = function(name, value) {
      if (name === "") {
        throw new Error("You may not Make(\"\") an empty string.");
      }
      if (made[name] != null) {
        throw new Error(`You may not Make() the same name twice: ${name}`);
      }
      made[name] = value;
      checkWaitingTakers();
      return value;
    };
    checkWaitingTakers = function() {
      var i, index, len, taker;
      if (alreadyChecking) { // Prevent recursion from Make() calls inside notify()
        return;
      }
      alreadyChecking = true;
// Depends on `waitingTakers`
// Comments below are to help reason through the (potentially) recursive behaviour
      for (index = i = 0, len = waitingTakers.length; i < len; index = ++i) {
        taker = waitingTakers[index];
        if (allNeedsAreMet(taker.needs)) { // Depends on `made`
          waitingTakers.splice(index, 1); // Mutates `waitingTakers`
          notify(taker); // Calls to Make() or Take() will mutate `made` or `waitingTakers`
          alreadyChecking = false;
          return checkWaitingTakers(); // Restart: `waitingTakers` (and possibly `made`) were mutated
        }
      }
      return alreadyChecking = false;
    };
    allNeedsAreMet = function(needs) {
      return needs.every(function(name) {
        return made[name] != null;
      });
    };
    resolve = function(needs, callback) {
      if (callback != null) {
        // We always try to resolve both synchronously and asynchronously
        asynchronousResolve(needs, callback);
      }
      return synchronousResolve(needs);
    };
    asynchronousResolve = function(needs, callback) {
      var taker;
      if (needs === "") {
        needs = [];
      } else if (typeof needs === "string") {
        needs = [needs];
      }
      taker = {
        needs: needs,
        callback: callback
      };
      if (allNeedsAreMet(needs)) {
        takersToNotify.push(taker);
        timeoutsNeeded++;
        if (!alreadyWaitingToNotify) {
          alreadyWaitingToNotify = true;
          setTimeout(notifyTakers); // Preserve asynchrony
          return timeoutsUsed++;
        }
      } else {
        return waitingTakers.push(taker);
      }
    };
    synchronousResolve = function(needs) {
      var i, len, n, o;
      if (typeof needs === "string") {
        return made[needs];
      } else {
        o = {};
        for (i = 0, len = needs.length; i < len; i++) {
          n = needs[i];
          o[n] = made[n];
        }
        return o;
      }
    };
    notifyTakers = function() {
      var i, len, queue, taker;
      alreadyWaitingToNotify = false;
      queue = takersToNotify;
      takersToNotify = [];
      for (i = 0, len = queue.length; i < len; i++) {
        taker = queue[i];
        notify(taker);
      }
      return null;
    };
    notify = function(taker) {
      var resolvedNeeds;
      resolvedNeeds = taker.needs.map(function(name) {
        return made[name];
      });
      return taker.callback.apply(null, resolvedNeeds);
    };
    // IE11 doesn't support Object.assign({}, obj), so we just use our own
    clone = function(obj) {
      var k, out, v;
      out = {};
      for (k in obj) {
        v = obj[k];
        out[k] = v;
      }
      return out;
    };
    // We want to add a few handy one-time events.
    // However, we don't know if we'll be running in a browser, or in node.
    // Thus, we look for the presence of a "window" object as our clue.
    if (typeof window !== "undefined" && window !== null) {
      addListener = function(eventName) {
        var handler;
        return window.addEventListener(eventName, handler = function(eventObject) {
          window.removeEventListener(eventName, handler);
          Make(eventName, eventObject);
          return void 0; // prevent unload from opening a popup
        });
      };
      addListener("beforeunload");
      addListener("click");
      addListener("unload");
      // Since we have a window object, it's probably safe to assume we have a document object
      switch (document.readyState) {
        case "loading":
          addListener("DOMContentLoaded");
          addListener("load");
          break;
        case "interactive":
          Make("DOMContentLoaded");
          addListener("load");
          break;
        case "complete":
          Make("DOMContentLoaded");
          Make("load");
          break;
        default:
          throw new Error(`Unknown document.readyState: ${document.readyState}. Cannot setup Take&Make.`);
      }
    }
    // Finally, we're ready to hand over control to module systems
    if (typeof module !== "undefined" && module !== null) {
      return module.exports = {
        Take: Take,
        Make: Make,
        DebugTakeMake: DebugTakeMake
      };
    }
  })();
}

// node_modules/doom/doom.coffee
(function() {
  var DOOM, act, attrNames, eventNames, propNames, read, styleNames, svgElms, svgNS, write, xlinkNS;
  svgNS = "http://www.w3.org/2000/svg";
  xlinkNS = "http://www.w3.org/1999/xlink";
  // This is used to cache normalized keys, and to provide defaults for keys that shouldn't be normalized
  attrNames = {
    gradientUnits: "gradientUnits",
    preserveAspectRatio: "preserveAspectRatio",
    startOffset: "startOffset",
    viewBox: "viewBox"
  };
  // common case-sensitive attr names should be listed here as needed — see svg.cofee in https://github.com/cdig/svg for reference
  eventNames = {
    blur: true,
    change: true,
    click: true,
    focus: true,
    input: true,
    keydown: true,
    keypress: true,
    keyup: true,
    mousedown: true,
    mouseenter: true,
    mouseleave: true,
    mousemove: true,
    mouseup: true,
    scroll: true
  };
  propNames = {
    childNodes: true,
    firstChild: true,
    innerHTML: true,
    lastChild: true,
    nextSibling: true,
    parentElement: true,
    parentNode: true,
    previousSibling: true,
    textContent: true,
    value: true
  };
  styleNames = {
    animation: true,
    animationDelay: true,
    background: true,
    borderRadius: true,
    color: true,
    display: true,
    fontSize: "html", // Only treat as a style if this is an HTML elm. SVG elms will treat this as an attribute.
    fontFamily: true,
    fontWeight: true,
    height: "html",
    left: true,
    letterSpacing: true,
    lineHeight: true,
    maxHeight: true,
    maxWidth: true,
    margin: true,
    marginTop: true,
    marginLeft: true,
    marginRight: true,
    marginBottom: true,
    minWidth: true,
    minHeight: true,
    opacity: "html",
    overflow: true,
    overflowX: true,
    overflowY: true,
    padding: true,
    paddingTop: true,
    paddingLeft: true,
    paddingRight: true,
    paddingBottom: true,
    pointerEvents: true,
    position: true,
    textDecoration: true,
    top: true,
    transform: "html",
    transition: true,
    visibility: true,
    width: "html",
    zIndex: true
  };
  // When creating an element, SVG elements require a special namespace, so we use this list to know whether a tag name is for an SVG or not
  svgElms = {
    circle: true,
    clipPath: true,
    defs: true,
    g: true,
    image: true,
    mask: true,
    path: true,
    rect: true,
    svg: true,
    text: true,
    use: true
  };
  read = function(elm, k) {
    var base, base1, base2;
    if (propNames[k] != null) {
      return (base = elm._DOOM_prop)[k] != null ? base[k] : base[k] = elm[k];
    } else if (styleNames[k] != null) {
      return (base1 = elm._DOOM_style)[k] != null ? base1[k] : base1[k] = elm.style[k];
    } else {
      k = attrNames[k] != null ? attrNames[k] : attrNames[k] = k.replace(/([A-Z])/g, "-$1").toLowerCase(); // Normalize camelCase into kebab-case
      return (base2 = elm._DOOM_attr)[k] != null ? base2[k] : base2[k] = elm.getAttribute(k);
    }
  };
  write = function(elm, k, v) {
    var cache, isCached, ns;
    if (propNames[k] != null) {
      cache = elm._DOOM_prop;
      isCached = cache[k] === v;
      if (!isCached) {
        return elm[k] = cache[k] = v;
      }
    } else if ((styleNames[k] != null) && !(elm._DOOM_SVG && styleNames[k] === "html")) {
      cache = elm._DOOM_style;
      isCached = cache[k] === v;
      if (!isCached) {
        return elm.style[k] = cache[k] = v;
      }
    } else if (eventNames[k] != null) {
      cache = elm._DOOM_event;
      if (cache[k] === v) {
        return;
      }
      if (cache[k] != null) {
        throw "DOOM experimentally imposes a limit of one handler per event per object.";
      }
      // If we want to add multiple handlers for the same event to an object,
      // we need to decide how that interacts with passing null to remove events.
      // Should null remove all events? Probably. How do we track that? Keep an array of refs to handlers?
      // That seems slow and error prone.
      cache[k] = v;
      if (v != null) {
        return elm.addEventListener(k, v);
      } else {
        return elm.removeEventListener(k, v);
      }
    } else {
      cache = elm._DOOM_attr;
      if (cache[k] === v) {
        return;
      }
      cache[k] = v;
      ns = k === "xlink:href" ? xlinkNS : null; // Grab the namespace if needed
      k = attrNames[k] != null ? attrNames[k] : attrNames[k] = k.replace(/([A-Z])/g, "-$1").toLowerCase(); // Normalize camelCase into kebab-case
      if (ns != null) {
        if (v != null) {
          return elm.setAttributeNS(ns, k, v); // set DOM attribute
// v is explicitly set to null (not undefined)
        } else {
          return elm.removeAttributeNS(ns, k); // remove DOM attribute // check for null
        }
      } else {
        if (v != null) {
          return elm.setAttribute(k, v); // set DOM attribute
// v is explicitly set to null (not undefined)
        } else {
          return elm.removeAttribute(k); // remove DOM attribute // check for null
        }
      }
    }
  };
  act = function(elm, opts) {
    var k, v;
    // Initialize the caches
    if (elm._DOOM_attr == null) {
      elm._DOOM_attr = {};
    }
    if (elm._DOOM_prop == null) {
      elm._DOOM_prop = {};
    }
    if (elm._DOOM_style == null) {
      elm._DOOM_style = {};
    }
    if (typeof opts === "object") {
      for (k in opts) {
        v = opts[k];
        write(elm, k, v);
        null;
      }
      return elm;
    } else if (typeof opts === "string") {
      return read(elm, opts);
    }
  };
  // PUBLIC API ####################################################################################

  // The first arg can be an elm or array of elms
  // The second arg can be an object of stuff to update in the elm(s), in which case we'll return the elm(s).
  // Or it can be a string prop/attr/style to read from the elm(s), in which case we return the value(s).
  DOOM = function(elms, opts) {
    var elm, i, len, results;
    if (typeof elms !== "array") {
      elms = [elms];
    }
    for (i = 0, len = elms.length; i < len; i++) {
      elm = elms[i];
      ((function() {
        if (elm == null) {
          throw new Error("DOOM was called with a null element");
        }
      })());
    }
    if (opts == null) {
      throw new Error("DOOM was called with null options");
    }
    results = (function() {
      var j, len1, results1;
      results1 = [];
      for (j = 0, len1 = elms.length; j < len1; j++) {
        elm = elms[j];
        results1.push(act(elm, opts));
      }
      return results1;
    })();
    if (results.length === 1) {
      return results[0];
    } else {
      return results;
    }
  };
  DOOM.create = function(type, parent, opts) {
    var elm;
    if (svgElms[type] != null) {
      elm = document.createElementNS(svgNS, type);
      if (type === "svg") {
        (opts != null ? opts : opts = {}).xmlns = svgNS;
      } else {
        elm._DOOM_SVG = true;
      }
    } else {
      elm = document.createElement(type);
    }
    if (opts != null) {
      DOOM(elm, opts);
    }
    if (parent != null) {
      DOOM.append(parent, elm);
    }
    return elm;
  };
  DOOM.append = function(parent, child) {
    parent.appendChild(child);
    return child;
  };
  DOOM.prepend = function(parent, child) {
    if (parent.hasChildNodes()) {
      parent.insertBefore(child, parent.firstChild);
    } else {
      parent.appendChild(child);
    }
    return child;
  };
  DOOM.remove = function(elm, child) {
    if (child != null) {
      if (child.parentNode === elm) {
        elm.removeChild(child);
      }
      return child;
    } else {
      elm.remove();
      return elm;
    }
  };
  DOOM.empty = function(elm) {
    return elm.innerHTML = "";
  };
  if (this != null) {
    // Attach to this
    this.DOOM = DOOM;
  }
  if (typeof window !== "undefined" && window !== null) {
    // Attach to the window
    window.DOOM = DOOM;
  }
  if (Make != null) {
    // Integrate with Take & Make
    return Make("DOOM", DOOM);
  }
})();

// coffee/app.coffee
Take(["DOOM", "DOMContentLoaded"], function(DOOM) {
  var i, len, node, nodes, render, results1, root;
  nodes = [
    [
      "div",
      {},
      [
        [
          "h1",
          {
            textContent: "test"
          }
        ]
      ]
    ]
  ];
  root = document.querySelector("main");
  render = function(parent, [tag, attrs, children]) {
    var child, elm, i, len, results1;
    elm = DOOM.create(tag, parent, attrs);
    if (children != null ? children.length : void 0) {
      results1 = [];
      for (i = 0, len = children.length; i < len; i++) {
        child = children[i];
        results1.push(render(elm, child));
      }
      return results1;
    }
  };
  results1 = [];
  for (i = 0, len = nodes.length; i < len; i++) {
    node = nodes[i];
    DOOM.empty(root);
    results1.push(render(root, node));
  }
  return results1;
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/admin/Work/whistle/build/app.coffee